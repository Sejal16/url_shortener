const express = require('express');
const userModel=require('../models/userModel')
const jwt = require('jsonwebtoken');
const jwt_key = require('../key');
const axios=require('axios')
const emailValidator = require('deep-email-validator');
const e = require('express');
//render index  file
module.exports.renderIndex=function renderIndex(req,res)
{
    res.render('index')
}

module.exports.renderUser=function renderUser(req,res)
{
    // console.log(req.cookies.userName);
    res.render('user',{userName:req.cookies.userName})
    
}

// signup user
module.exports.signup = async function signup(req, res) {
    try {
        let dataObj = req.body;
        // console.log(dataObj);
        email=req.body.email
        async function isEmailValid(email) {
            return emailValidator.validate(email)
           }
       const {valid} = await isEmailValid(email);
       if(valid){
        let user = await userModel.create(dataObj);

        // sendMail('signup',user)
         
        if (user) {
            // res.redirect("/user")
            return res.json({
                message: "User signed up",
                data: user
            });
        }
        else {
            res.json({
                message: "error while signup"
            });
        }
    }
    else{
        res.json({
            message: "Not a valid email"
        }); 
    }
}
    catch (err) {
        res.json({
            message: err.message
        })
    }
}
//  login 
module.exports.login= async function login(req,res){
    try {
        let data = req.body;
        // console.log(data);
        if (data.email) {
            let user = await userModel.findOne({ email: data.email })
            if (user) {
                // console.log(user);
                // we will do the bcyrpt later
                if (data.password === user.password) {

                    let uid = user['_id']; //uid
                    let token = jwt.sign({ payload: uid }, jwt_key)
                    res.cookie('login', token, { httpOnly: true });
                    res.cookie('userName',user.name,{httpOnly:true})
                    res.cookie('userID',uid,{httpOnly:true})
                    res.redirect("/user/" +uid)
                    // res.json({
                    //     message: "User has logged in",
                    //     userDetails: user
                    // })
                }
                else {
                    res.json({
                        message: "Wrong Credentials"
                    })
                }
            }

            else {
                res.json({
                    message: "user not found"
                })
            }
        }
        else {
            res.json({
                message: "user not found"
            })
        }
    }
    catch (err) {
        res.json({
            message: err.message
        })
    }
}
// logout
module.exports.logout=function logout(req,res){
    //1. First find the cookie named login 
    //   2. Override the cookie with blank space
    //   3. then destroy the cookie after 1 millisecond
    res.cookie('login',' ',{maxAge:1})
    res.cookie('userID',' ',{maxAge:1})
    res.cookie('newShortUrl',' ',{maxAge:1})
    res.cookie('userName',' ',{maxAge:1})
    res.redirect("/")
    // res.json({
    //     message:"logged out"
    // })

}

// protectRoute = which verifies password when the user request for login again 
module.exports.protectRoute = async function protectRoute(req, res, next) {
    try {   
        let token;
        if (req.cookies.login) {
            token = req.cookies.login;
            let payload = jwt.verify(token, jwt_key);
            if (payload) {
                const user = await userModel.findById(payload.payload)
                req.id = user.id;
              
                next();
            }
            else {
                return res.json({
                    message: "not verified"
                })
            }
        }
        else {
            //browser
            const client=req.get('User-Agent');
            if(client.includes('Chrome','Firefox','Edge','Safari')==true)
            {
                return res.redirect('/login');
            }
            //postman
            return res.json({
                message: "login first"
            })
        }
    }
    catch (err) {
        res.json({
            message: err.message
        })
    }
}
